snippet log "console.log" b
console.log(${1:"${2:value}"});
endsnippet

snippet dir "console.dir" b
console.dir(${1:object});
endsnippet

snippet req "require" b
${1:pkg} = require('$1')
endsnippet

snippet err "throw new Error" b
throw new Error('${1:something went wrong}');
endsnippet

snippet doc
/**
 * $1
 */
endsnippet

snippet @param
@param {${1:string}} ${2:name} ${3:Description}
endsnippet

snippet @returns
@returns {${1:string}} ${2:Description}
endsnippet

snippet @rv
@returns {void}
endsnippet

# START from https://github.com/lencioni/dotfiles/blob/master/.vim/UltiSnips/jasmine.snippetsj
snippet des "describe() block" b
describe('${1}', function() {
	${0:${VISUAL}}
});
endsnippet

snippet con "context() block" b
context('${1}', function() {
	${0:${VISUAL}}
});
endsnippet

snippet bef "beforeEach() block" b
beforeEach(function() {
	${0:${VISUAL}}
});
endsnippet

snippet aft "afterEach() block" b
afterEach(function() {
	${0:${VISUAL}}
});
endsnippet

snippet it "it() block" b
it('${1}', function() {
	${0:${VISUAL}}
});
endsnippet

snippet exp "expect() assertion" b
expect(${1})${2}.to${3}(${0:${VISUAL}});
endsnippet

snippet mproto "module.prototype"
module.prototype.${1} = function(${2}) {
	${3}
};${4}
endsnippet

snippet throw "throw new Error()"
throw new Error('${1}');${2}
endsnippet

snippet proto "myModule.prototype.myFunction = function () {}"
${1}.prototype.${2} = function(${3}) {
	${4}
};${5}
endsnippet

# END from https://github.com/lencioni/dotfiles/blob/master/.vim/UltiSnips/jasmine.snippets
